syntax = "proto3";
package heimdall.topup.v1beta1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "heimdall/base/v1beta1/divident.proto";

option go_package = "github.com/maticnetwork/heimdall/x/topup/types";

option (gogoproto.sizer_all)       = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;

// Query defines the gRPC querier service.
service Query {
    // Sequence query sequence no
    rpc Sequence(QuerySequenceRequest) returns (QuerySequenceResponse) {
        option (google.api.http).get = "/heimdall/topup/v1beta1/sequence";
    }

    // IsOldTx checking tx is old or not
    rpc IsOldTx(QueryIsOldTxSequenceRequest)
        returns (QueryIsOldTxSequenceResponse) {
        option (google.api.http).get = "/heimdall/topup/v1beta1/isoldtx";
    }

    // QueryDividendAccountRoot will get the dividend account root hash
    rpc QueryDividendAccountRoot(QueryDividendAccountRootRequest)
        returns (QueryDividendAccountRootResponse) {
        option (google.api.http).get =
            "/heimdall/topup/v1beta1/dividend-account-root";
    }

    //
    rpc QueryDividendAccounts(QueryDividendAccountsRequest)
        returns (QueryDividendAccountsResponse) {
        option (google.api.http).get =
            "/heimdall/topup/v1beta1/dividend-accounts";
    }

    rpc QueryDividendAccount(QueryDividendAccountRequest)
        returns (QueryDividendAccountResponse) {
        option (google.api.http).get =
            "/heimdall/topup/v1beta1/dividend-account/{address}";
    }
}

// Sequence request and response messages
message QuerySequenceRequest {
    string tx_hash   = 1;
    uint64 log_index = 2;
}
message QuerySequenceResponse {
    uint64 sequence = 1;
}

// IsOldTx Request and response
message QueryIsOldTxSequenceRequest {
    string tx_hash   = 1;
    uint64 log_index = 2;
}
message QueryIsOldTxSequenceResponse {
    bool status = 1;
}

// dividend account root
message QueryDividendAccountRootRequest {}
message QueryDividendAccountRootResponse {
    string account_root_hash = 1;
}

// dividend accounts
message QueryDividendAccountsRequest {}
message QueryDividendAccountsResponse {
    repeated heimdall.types.DividendAccount dividend_accounts = 1;
}

// QueryDividendAccountRequest request for query dividend account
message QueryDividendAccountRequest {
    string address = 1;
}
message QueryDividendAccountResponse {
    heimdall.types.DividendAccount dividend_account = 1;
}
